// src/imageGenerationMulti.js
import { SogniClient } from '@sogni-ai/sogni-client';
import fs from 'fs';
import chalk from 'chalk';

const subjects = [
  'dragon', 'cyborg', 'pirate queen', 'ghostly samurai', 
  'dark angel', 'robot assassin', 'shaman warrior', 
  'time traveler', 'shadow elf', 'demon slayer'
];

const actions = [
  'casting ancient magic', 'riding a futuristic motorcycle', 
  'fighting with dual swords', 'playing a mystical flute', 
  'hacking a security system', 'flying through the sky', 
  'meditating under a cherry blossom tree', 'escaping from a burning city', 
  'exploring ancient ruins', 'leading an army of undead'
];

const environments = [
  'in a neon-lit cyber city', 'deep in an enchanted forest', 
  'on a stormy ocean', 'inside a forgotten temple', 
  'on a floating sky island', 'in a post-apocalyptic wasteland', 
  'inside a magical library', 'on a snowy mountain peak', 
  'in an alien spaceship', 'in a medieval battlefield'
];

const moods = [
  'with surreal dream-like aesthetics', 'with vibrant, glowing colors', 
  'in a dark, eerie atmosphere', 'with hyper-realistic details', 
  'in a psychedelic art style', 'with soft, pastel tones', 
  'in a gritty noir setting', 'in a steampunk vibe', 
  'with cinematic lighting', 'with vintage watercolor style'
];

const styles = [
  'anime', 'cyberpunk', 'realistic', 'pixel art', 
  'watercolor painting', '3D render', 'vintage illustration', 'fantasy art'
];

/** –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ */
function getRandomElement(arr) {
  return arr[Math.floor(Math.random() * arr.length)];
}

/** –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ prompt */
function getRandomPrompt() {
  let customPrompts = [];
  try {
    if (fs.existsSync('prompts.txt')) {
      const data = fs.readFileSync('prompts.txt', 'utf-8');
      customPrompts = data.split('\n').map(line => line.trim()).filter(line => line);
    }
  } catch (error) {
    console.error(chalk.red('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ prompts.txt:'), error);
  }

  if (customPrompts.length && Math.random() < 0.5) {
    return getRandomElement(customPrompts);
  } else {
    const subject = getRandomElement(subjects);
    const action = getRandomElement(actions);
    const environment = getRandomElement(environments);
    const mood = getRandomElement(moods);
    return `${subject} ${action} ${environment} ${mood}`;
  }
}

/** –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ */
function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, —Å —É—á—ë—Ç–æ–º –ø—Ä–æ–∫—Å–∏ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ).
 */
async function generateOnce(username, password, uuid, accountIndex, iteration, proxyUrl = null) {
  if (proxyUrl) {
    process.env.HTTP_PROXY = proxyUrl;
    process.env.HTTPS_PROXY = proxyUrl;
    console.log(chalk.green(`(–ê–∫–∫ #${accountIndex}) –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏: ${proxyUrl}`));
  }

  const options = { appId: uuid, network: 'fast' };
  const client = await SogniClient.createInstance(options);
  await client.account.login(username, password);
  console.log(chalk.green(`(–ê–∫–∫ #${accountIndex}) ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! (–∏—Ç–µ—Ä–∞—Ü–∏—è ${iteration})`));

  await client.projects.waitForModels();
  const mostPopularModel = client.projects.availableModels.reduce((a, b) =>
    a.workerCount > b.workerCount ? a : b
  );

  const randomPrompt = getRandomPrompt();
  const randomStyle = getRandomElement(styles);
  console.log(chalk.blue(`(–ê–∫–∫ #${accountIndex}) üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ‚Ññ${iteration}: "${randomPrompt}" (—Å—Ç–∏–ª—å: "${randomStyle}")`));

  const project = await client.projects.create({
    modelId: mostPopularModel.id,
    disableNSFWFilter: true,
    positivePrompt: randomPrompt,
    negativePrompt: 'malformation, bad anatomy, low quality, jpeg artifacts, watermark',
    stylePrompt: randomStyle,
    steps: 20,
    guidance: 7.5,
    numberOfImages: 1,
  });

  project.on('progress', (progress) => {
    console.log(chalk.yellow(`(–ê–∫–∫ #${accountIndex}) üìä –ü—Ä–æ–≥—Ä–µ—Å—Å ‚Ññ${iteration}: ${progress}`));
  });

  const imageUrls = await project.waitForCompletion();
  console.log(chalk.green(`(–ê–∫–∫ #${accountIndex}) ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚Ññ${iteration} –≥–æ—Ç–æ–≤–æ! URL: ${JSON.stringify(imageUrls)}`));

  // –£–¥–∞–ª—è–µ–º/–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
  // client.disconnect();

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏
  if (proxyUrl) {
    delete process.env.HTTP_PROXY;
    delete process.env.HTTPS_PROXY;
  }
}

/**
 * –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.
 */
async function generateLoopForAccount(username, password, uuid, accountIndex, proxyUrl = null) {
  let iteration = 1;
  while (true) {
    try {
      await generateOnce(username, password, uuid, accountIndex, iteration, proxyUrl);
    } catch (error) {
      console.error(chalk.red(`(–ê–∫–∫ #${accountIndex}) ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–∏—Ç–µ—Ä–∞—Ü–∏—è ${iteration}): ${error.message}`));
    }
    const randomDelay = Math.floor(Math.random() * (60000 - 30000 + 1)) + 30000;
    console.log(chalk.magenta(`(–ê–∫–∫ #${accountIndex}) ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${Math.round(randomDelay / 1000)} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π...`));
    await delay(randomDelay);
    iteration++;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º—É–ª—å—Ç–∏–∞–∫–∫–∞—É–Ω—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
 * –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ data.txt: login|password|uuid
 * –ï—Å–ª–∏ –≤ proxy.txt –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∏, –∫–∞–∂–¥–∞—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—É.
 */
export async function generateImagesMulti() {
  console.log(chalk.cyan(`\n=== –ú—É–ª—å—Ç–∏–∞–∫–∫–∞—É–Ω—Ç–Ω—ã–π —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ===\n`));

  // –ß–∏—Ç–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ data.txt
  const rawData = fs.readFileSync('data.txt', 'utf-8');
  const accountLines = rawData.trim().split('\n');
  if (!accountLines.length) {
    console.log(chalk.red('–û—à–∏–±–∫–∞: —Ñ–∞–π–ª data.txt –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.'));
    return;
  }

  // –ß–∏—Ç–∞–µ–º –ø—Ä–æ–∫—Å–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
  let proxies = [];
  try {
    const rawProxies = fs.readFileSync('proxy.txt', 'utf-8');
    proxies = rawProxies.trim().split('\n').map(line => line.trim()).filter(line => line);
    if (proxies.length) {
      console.log(chalk.green(`–ù–∞–π–¥–µ–Ω–æ ${proxies.length} –ø—Ä–æ–∫—Å–∏.`));
    } else {
      console.log(chalk.yellow('–ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.'));
    }
  } catch (error) {
    console.log(chalk.yellow('–§–∞–π–ª proxy.txt –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.'));
  }

  const promises = accountLines.map((line, index) => {
    const [username, password, uuid] = line.trim().split('|');
    if (!username || !password || !uuid) {
      console.log(chalk.red(`–°—Ç—Ä–æ–∫–∞ #${index + 1} –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: ${line}`));
      return Promise.resolve();
    }
    // –ï—Å–ª–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –µ—Å—Ç—å –ø—Ä–æ–∫—Å–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    const proxyUrl = proxies[index] ? proxies[index] : null;
    return generateLoopForAccount(username, password, uuid, index + 1, proxyUrl);
  });

  await Promise.all(promises);
}