// src/imageGenerationMulti.js
import { SogniClient } from '@sogni-ai/sogni-client';
import fs from 'fs';
import chalk from 'chalk';

/**
 * –°–ø–∏—Å–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö prompt'–æ–≤.
 */
const subjects = [
  'dragon', 'cyborg', 'pirate queen', 'ghostly samurai', 
  'dark angel', 'robot assassin', 'shaman warrior', 
  'time traveler', 'shadow elf', 'demon slayer'
];

const actions = [
  'casting ancient magic', 'riding a futuristic motorcycle', 
  'fighting with dual swords', 'playing a mystical flute', 
  'hacking a security system', 'flying through the sky', 
  'meditating under a cherry blossom tree', 'escaping from a burning city', 
  'exploring ancient ruins', 'leading an army of undead'
];

const environments = [
  'in a neon-lit cyber city', 'deep in an enchanted forest', 
  'on a stormy ocean', 'inside a forgotten temple', 
  'on a floating sky island', 'in a post-apocalyptic wasteland', 
  'inside a magical library', 'on a snowy mountain peak', 
  'in an alien spaceship', 'in a medieval battlefield'
];

const moods = [
  'with surreal dream-like aesthetics', 'with vibrant, glowing colors', 
  'in a dark, eerie atmosphere', 'with hyper-realistic details', 
  'in a psychedelic art style', 'with soft, pastel tones', 
  'in a gritty noir setting', 'in a steampunk vibe', 
  'with cinematic lighting', 'with vintage watercolor style'
];

const styles = [
  'anime', 'cyberpunk', 'realistic', 'pixel art', 
  'watercolor painting', '3D render', 'vintage illustration', 'fantasy art'
];

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞.
 */
function getRandomElement(arr) {
  return arr[Math.floor(Math.random() * arr.length)];
}

/**
 * –°—á–∏—Ç—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø—Ä–æ–º—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–∑ prompts.txt –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π.
 * –° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 50% –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º—Ç, –∏–Ω–∞—á–µ —Å–æ–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π prompt –∏–∑ —Å–ø–∏—Å–∫–æ–≤.
 */
function getRandomPrompt() {
  let customPrompts = [];
  try {
    if (fs.existsSync('prompts.txt')) {
      const data = fs.readFileSync('prompts.txt', 'utf-8');
      customPrompts = data.split('\n').map(line => line.trim()).filter(Boolean);
    }
  } catch (error) {
    console.error(chalk.red('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ prompts.txt:'), error);
  }
  if (customPrompts.length && Math.random() < 0.5) {
    return getRandomElement(customPrompts);
  } else {
    const subject = getRandomElement(subjects);
    const action = getRandomElement(actions);
    const environment = getRandomElement(environments);
    const mood = getRandomElement(moods);
    return `${subject} ${action} ${environment} ${mood}`;
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏.
 */
function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è –£–ñ–ï –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç.
 * - –ù–µ —Å–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–Ω–æ–≤–æ
 * - –ù–µ –¥–µ–ª–∞–µ–º login() –∑–∞–Ω–æ–≤–æ
 */
async function generateOnceUsingClient(client, accountIndex, iteration) {
  // –ñ–¥—ë–º, –ø–æ–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Å–æ–±–µ—Ä—ë—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
  await client.projects.waitForModels();
  const availableModels = client.projects.availableModels;
  if (!availableModels || availableModels.length === 0) {
    throw new Error('No available models found');
  }

  // –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º workerCount
  const mostPopularModel = availableModels.reduce((a, b) =>
    a.workerCount > b.workerCount ? a : b
  );

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π prompt
  const randomPrompt = getRandomPrompt();
  const randomStyle = getRandomElement(styles);

  console.log(chalk.blue(
    `(–ê–∫–∫ #${accountIndex}) üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ‚Ññ${iteration}: "${randomPrompt}" (—Å—Ç–∏–ª—å: "${randomStyle}")`
  ));

  // –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–µ–∫—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  const project = await client.projects.create({
    modelId: mostPopularModel.id,
    disableNSFWFilter: true,
    positivePrompt: randomPrompt,
    negativePrompt: 'malformation, bad anatomy, low quality, jpeg artifacts, watermark',
    stylePrompt: randomStyle,
    steps: 20,
    guidance: 7.5,
    numberOfImages: 1,
  });

  // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
  project.on('progress', (progress) => {
    console.log(chalk.yellow(`(–ê–∫–∫ #${accountIndex}) üìä –ü—Ä–æ–≥—Ä–µ—Å—Å ‚Ññ${iteration}: ${progress}`));
  });

  // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  const imageUrls = await project.waitForCompletion();
  console.log(chalk.green(
    `(–ê–∫–∫ #${accountIndex}) ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚Ññ${iteration} –≥–æ—Ç–æ–≤–æ! URL: ${JSON.stringify(imageUrls)}`
  ));
}

/**
 * –¶–∏–∫–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:
 * 1) –û–¥–∏–Ω —Ä–∞–∑ —Å–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–∞ SogniClient
 * 2) –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è (login) –æ–¥–∏–Ω —Ä–∞–∑
 * 3) –í –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å retry –ø—Ä–∏ Timeout
 */
async function generateLoopForAccount(username, password, uuid, accountIndex, proxyUrl) {
  let client;
  // –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –æ–¥–∏–Ω —Ä–∞–∑
  try {
    if (proxyUrl) {
      process.env.HTTP_PROXY = proxyUrl;
      process.env.HTTPS_PROXY = proxyUrl;
      console.log(chalk.green(`(–ê–∫–∫ #${accountIndex}) –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏: ${proxyUrl}`));
    }

    const options = { appId: uuid, network: 'fast' };
    client = await SogniClient.createInstance(options);

    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    await client.account.login(username, password);
    console.log(chalk.green(`(–ê–∫–∫ #${accountIndex}) ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ)!`));

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏, —á—Ç–æ–±—ã –Ω–µ –≤–ª–∏—è–ª–æ –¥–∞–ª—å—à–µ
    if (proxyUrl) {
      delete process.env.HTTP_PROXY;
      delete process.env.HTTPS_PROXY;
    }

  } catch (authError) {
    console.error(chalk.red(`(–ê–∫–∫ #${accountIndex}) ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${authError.message}`));
    return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
  }

  let iteration = 1;
  while (true) {
    let success = false;
    let attempts = 0;
    const maxAttempts = 3;
    while (!success && attempts < maxAttempts) {
      try {
        await generateOnceUsingClient(client, accountIndex, iteration);
        success = true;
      } catch (error) {
        attempts++;
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - "Timeout waiting for models", –¥–µ–ª–∞–µ–º retry
        if (error.message.includes('Timeout waiting for models')) {
          console.error(chalk.red(
            `(–ê–∫–∫ #${accountIndex}) ‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempts} (–∏—Ç–µ—Ä–∞—Ü–∏—è ${iteration}): Timeout. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...`
          ));
          await delay(10000);
        } else {
          console.error(chalk.red(
            `(–ê–∫–∫ #${accountIndex}) ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–∏—Ç–µ—Ä–∞—Ü–∏—è ${iteration}): ${error.message}`
          ));
          break;
        }
      }
    }
    if (!success) {
      console.error(chalk.red(
        `(–ê–∫–∫ #${accountIndex}) ‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–∏ ${iteration}.`
      ));
    }

    // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É 30 —Å–µ–∫ –∏ 2 –º–∏–Ω—É—Ç
    const randomDelay = Math.floor(Math.random() * (120000 - 30000 + 1)) + 30000;
    console.log(chalk.magenta(
      `(–ê–∫–∫ #${accountIndex}) ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${Math.round(randomDelay / 1000)} —Å–µ–∫—É–Ω–¥...`
    ));
    await delay(randomDelay);
    iteration++;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º—É–ª—å—Ç–∏–∞–∫–∫–∞—É–Ω—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
 * data.txt: login|password|uuid
 * proxy.txt: –ø—Ä–æ–∫—Å–∏ –ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫–µ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º)
 * –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (0..15 —Å–µ–∫) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, —á—Ç–æ–±—ã –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å –≤—Å–µ—Ö —Å—Ä–∞–∑—É.
 */
export async function generateImagesMulti() {
  console.log(chalk.cyan(`\n=== –ú—É–ª—å—Ç–∏–∞–∫–∫–∞—É–Ω—Ç–Ω—ã–π —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ===\n`));

  let accountLines;
  try {
    const rawData = fs.readFileSync('data.txt', 'utf-8');
    accountLines = rawData.trim().split('\n').filter(Boolean);
  } catch (error) {
    console.log(chalk.red('–û—à–∏–±–∫–∞: —Ñ–∞–π–ª data.txt –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.'));
    return;
  }

  let proxies = [];
  try {
    const rawProxies = fs.readFileSync('proxy.txt', 'utf-8');
    proxies = rawProxies.trim().split('\n').map(line => line.trim()).filter(Boolean);
    if (proxies.length) {
      console.log(chalk.green(`–ù–∞–π–¥–µ–Ω–æ ${proxies.length} –ø—Ä–æ–∫—Å–∏.`));
    } else {
      console.log(chalk.yellow('–ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.'));
    }
  } catch (error) {
    console.log(chalk.yellow('–§–∞–π–ª proxy.txt –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.'));
  }

  const promises = accountLines.map(async (line, index) => {
    const [username, password, uuid] = line.trim().split('|');
    if (!username || !password || !uuid) {
      console.log(chalk.red(`–°—Ç—Ä–æ–∫–∞ #${index + 1} –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: ${line}`));
      return;
    }

    const proxyUrl = proxies[index] || null;
    // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 0..15 —Å–µ–∫, —á—Ç–æ–±—ã –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å –≤—Å–µ—Ö —Ä–∞–∑–æ–º
    const initialDelay = Math.floor(Math.random() * 15000);
    console.log(chalk.magenta(
      `(–ê–∫–∫ #${index + 1}) –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: ${(initialDelay / 1000).toFixed(2)} —Å–µ–∫.`
    ));
    await delay(initialDelay);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –æ–¥–Ω–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º (–∏ –æ–¥–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π)
    return generateLoopForAccount(username, password, uuid, index + 1, proxyUrl);
  });

  await Promise.all(promises);
}
